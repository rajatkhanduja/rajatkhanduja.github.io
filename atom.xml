<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sudo random]]></title>
  <link href="http://rajatkhanduja.com/atom.xml" rel="self"/>
  <link href="http://rajatkhanduja.com/"/>
  <updated>2014-05-11T22:16:50+05:30</updated>
  <id>http://rajatkhanduja.com/</id>
  <author>
    <name><![CDATA[Rajat Khanduja]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Evernote OAuth in C++]]></title>
    <link href="http://rajatkhanduja.com/techblog/2014/05/11/evernote-oauth-in-c-plus-plus/"/>
    <updated>2014-05-11T19:14:33+05:30</updated>
    <id>http://rajatkhanduja.com/techblog/2014/05/11/evernote-oauth-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Due to the lack of an official <a href="https://evernote.com">Evernote</a> client for
Linux and dissatisfied with solutions like
<a href="https://github.com/nvbn/everpad">Neverpad</a> and <a href="http://sourceforge.net/projects/nevernote/">NixNote (formerly
Nevernote)</a>, I have started working
on <a href="https://github.com/rajatkhanduja/Evernote-for-linux">my own Linux client</a>.</p>

<p>It was while developing this that I learned that <a href="https://github.com/evernote/evernote-sdk-cpp">Evernote SDK for
C++</a> doesn’t really provide any
integration with OAuth. I couldn’t even find a well formed solution for the
same on the Internet, except some forum posts suggesting using any available
OAuth 1.0 client. Searching for OAuth clients for C++, I found
<a href="https://github.com/pipacs/o2">O2</a>.  Using this, I was able to create a simple
OAuth integration for Evernote. </p>

<p>Here are the steps :-</p>

<!--more-->

<ol>
  <li>Taking cue from <a href="https://github.com/pipacs/o2/blob/master/src/o1dropbox.h">O2 integration with Dropbox</a>, 
I extended O1 to create <code>EvernoteAuthenticator</code></li>
</ol>

<script src="https://gist.github.com/rajatkhanduja/edbb7f8d162912b38157.js?file=EvernoteAuthenticator.h"></script>

<ol>
  <li><code>EvernoteClient</code> demonstrates how <code>EvernoteAuthenticator</code> is initialized and called.
 Moreover, it handles the signals generated by <code>EvernoteAuthenticator</code> to open
 a browser, which is required for the user to enter his credentials to log in.
 It also allows the developer to use the sandboxed environment (more about that later).</li>
</ol>

<script src="https://gist.github.com/rajatkhanduja/edbb7f8d162912b38157.js?file=EvernoteClient.h"></script>

<script src="https://gist.github.com/rajatkhanduja/edbb7f8d162912b38157.js?file=EvernoteClient.cpp"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docspad SDK]]></title>
    <link href="http://rajatkhanduja.com/techblog/2014/05/01/docspad-sdk/"/>
    <updated>2014-05-01T16:46:51+05:30</updated>
    <id>http://rajatkhanduja.com/techblog/2014/05/01/docspad-sdk</id>
    <content type="html"><![CDATA[<p>In an <a href="http://rajatkhanduja.com/techblog/2014/03/12/hasjob-plus-docspad/">earlier post</a>, I had
discussed how I integrated <a href="http://docspad.com">Docspad API</a> with
<a href="http://hasjob.co">Hasjob</a>.  As there was no Docspad SDK at that time, its
absence made me realize their importance. Having to deal with raw API calls,
these were the primary problems that I faced, which I thought could be resolved
by a Software Development Kit (SDK) :-</p>

<ol>
  <li>
    <p><strong>API lets me talk to your tool, but not in my language</strong></p>

    <p>Say I am developing in Python and I have a dictionary of parameters explaining 
 all that I need the API to do, but the API doesn’t understand the dictionary!
 I would need to convert all those parameters and variables in GET/POST variables
 that before I can get the task done. Moreover, the conventions in your API
 might be extremely different from those of my project, making things worse.</p>

    <p>Certainly, I could work around that by wrapping around your API, which brings
 me to the next point.</p>
  </li>
  <li>
    <p><strong>Managing network calls and errors is annoying</strong></p>

    <p>There are API errors and then there are network/connection errors, timeouts
 and what not. The last thing I need when dealing with a project idea is to
 get stuck understanding what an error code means. SDKs not only help translate
 the content in the developer’s language, but also the errors. An exception
 that describes the error makes it easy for the developer to handle
 certain edge cases without the program blowing up in the users’ face.</p>
  </li>
  <li>
    <p><strong>SDKs provide code samples</strong></p>

    <p>Even if a developer doesn’t need the entire SDK, either because he only
 requires to make a few calls to the API or he/she does not think the SDK
 interacts well with his tool, an openly available SDK still provides code
 samples to the developer to help him/her manage basic things. Be it managing
 errors or creating request URLs, SDKs can act as a good demonstration of how
 the APIs must be used.</p>
  </li>
</ol>

<p><a href="https://twitter.com/sniketh">Niketh</a> had already been planning to release SDKs
himself, so when I suggested it to him, he was eager to get started! Soon
<!--more-->
after, I began working on a Python SDK as I already had written some <a href="https://github.com/rajatkhanduja/hasjob/commit/45945f1cbad17dbc03839388a05cacb0bbf3d07b">code to
wrap around Docspad API while integrating with
Hasjob</a>.
For inspiration and ideas about how a SDK should be structured, I looked at
other popular SDKs, especially the <a href="https://www.dropbox.com/developers/core/sdks/python">Dropbox
SDKs</a>. </p>

<p>Once we had worked out the design and structure of the <a href="https://github.com/bookpad/docspad-sdk-python">Python
SDK</a>, we aimed to keep other SDKs
quite similar so as to have a common interface throughout languages. However, as 
different languaes have different programming idioms and conventions, having 
the <em>exact same</em> interface across languages would beat the purpose by forcing
the developers to think in terms of another language. As a result, while the
basic ideas and interface remains similar across languages, there are minor 
differences.</p>

<p>With <a href="https://twitter.com/ajayn1609">Ajay’s</a> help, we have been able to release
an entire <a href="https://github.com/Bookpad/?query=docspad-sdk">arsenal of SDKs</a> for
<a href="https://github.com/bookpad/docspad-sdk-php">PHP</a>,
<a href="https://github.com/bookpad/docspad-sdk-java">Java</a> and
<a href="https://github.com/bookpad/docspad-sdk-ruby">Ruby</a> developers as well.</p>

<blockquote class="twitter-tweet" lang="en"><p>For all the PHP developers out there, we have officially released our PHP SDK, Happy Hacking <a href="https://t.co/BHvmu7623g">https://t.co/BHvmu7623g</a> !!</p>&mdash; Bookpad Inc (@bookpadinc) <a href="https://twitter.com/bookpadinc/statuses/450967924216692736">April 1, 2014</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>So how do our SDKs solve the problems discussed in the beginning? Using the
Ruby SDK, for instance, this is how one could write a program to upload a
document, create a new session, get a view url and then delete the document.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">load</span> <span class="s1">&#39;docspad.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">begin</span>
</span><span class="line">    <span class="n">client</span> <span class="o">=</span> <span class="no">DocspadClient</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">YOUR_API_KEY</span><span class="p">)</span>
</span><span class="line">    <span class="n">doc</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="no">PATH_TO_FILE</span><span class="p">)</span> <span class="c1"># Uploads file; returns an instance of DocspadDocument</span>
</span><span class="line">    <span class="k">begin</span>
</span><span class="line">        <span class="n">status</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">getStatus</span>
</span><span class="line">        <span class="nb">puts</span> <span class="n">status</span>
</span><span class="line">        <span class="nb">sleep</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span> <span class="k">until</span> <span class="n">status</span><span class="o">.</span><span class="n">conversionStatus</span> <span class="o">==</span> <span class="ss">DocspadDocument</span><span class="p">:</span><span class="ss">:ConversionStatus</span><span class="o">::</span><span class="no">COMPLETED</span>
</span><span class="line">
</span><span class="line">    <span class="n">session</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">newSession</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">doc</span><span class="o">.</span><span class="n">getViewUrl</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class="line">    <span class="n">doc</span><span class="o">.</span><span class="n">deleteSession</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class="line">    <span class="n">doc</span><span class="o">.</span><span class="n">delete</span>
</span><span class="line"><span class="k">rescue</span> <span class="no">DocspadError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class="line">    <span class="nb">puts</span> <span class="n">error</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note how not only the developer doesn’t need to care about the details of the
network call, such as URL and the POST parameters, he is also freed of the hassle
of checking and managing all the errors that could arise. Moreover, with little
documentation available with the methods, a developer can get started
integrating the API into his project, without going through the entire <a href="http://bookpad.in/developer/gettingstarted">API
documentation</a> and preparing
himself for all kinds of response the API could return.</p>

<p>So, what are you waiting for? Get yourself an <a href="http://docspad.com/signup/freetrial">API
key</a> now and jump start your Docspad
integration with the SDKs. For issues or bugs with the SDKs, you could use the
issue tracker on Github or reach out to Docspad
(<a href="https://twitter.com/docspadofficial">@docspadofficial</a>) on Twitter [or just
drop by and say Hi]. If you are looking for SDK for some other language or have something to say about the post, leave a comment below.
leave a comment below</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmenting HasJob with Docspad]]></title>
    <link href="http://rajatkhanduja.com/techblog/2014/03/12/hasjob-plus-docspad/"/>
    <updated>2014-03-12T00:06:09+05:30</updated>
    <id>http://rajatkhanduja.com/techblog/2014/03/12/hasjob-plus-docspad</id>
    <content type="html"><![CDATA[<p>About two months ago, <a href="http://twitter.com/sniketh">Niketh</a> came up with an idea
to augment the job application process on <a href="https://hasjob.co">Hasjob</a>.  Having
made the quite awesome product, <a href="http://docspad.com">Docspad</a> for handling
documents in web applications, he certainly noticed the lack of the option to
let a job applicant upload a CV while applying through Hasjob. While the user
could add details about himself/herself in a text field, nothing tells as much
about an applicant as a personalized CV. As the <a href="https://github.com/hasgeek/hasjob">code for the website is open
sourced</a> and written in Python, I took this
opportunity to check out the <a href="http://docspad.com/documentation/gettingstarted">Docspad
APIs</a> and spend a weekend
contributing to a Python based open source project! </p>

<p>But before I dive into the task and the experience, let’s first discuss more about 
Hasjob and Docspad.</p>

<p>Hasjob is <a href="http://hasgeek.com">HasGeek</a>’s job board. Hasgeek, based out of
Bangalore, is known for organizing technology events for geeks and developers
in India. Some of these events include Hackathons and
<a href="https://hacknight.in">Hacknights</a>, which are loved among the geeks. HasGeek
lives up to its name by providing the source code to their website and its
components under open source licenses on <a href="https://github.com/hasgeek/">Github</a>.</p>

<p>With the goal of making digital content more accessible, Niketh and
<a href="https://twitter.com/bandiaditya">Aditya</a> founded <a href="http://bookpad.in">Bookpad</a>
(<a href="http://twitter.com/bookpadinc">@bookpadinc</a>). <a href="http://docspad.com">Docspad</a> is
their first product, which provides an easy solution for developers to make
applications with document handling capabilities. The set of APIs make it easy
for a developer to provide users with the option to upload and view documents
through the web browser on any device ranging from mobile to desktop.
<!--more--></p>

<p>Now, the primary task was to provide a job applicant with the option to upload
a document as his CV and allow the employer to view the same. Moreover, we
wanted the integration to make as little changes to the current workflow and
code architecture.  The reason behind this was two-fold : </p>

<ul>
  <li>
    <p>allow seamless transition to the new workflow.</p>
  </li>
  <li>
    <p>avoid making changes to the database layer or code architecture to make it
easy to integrate and make it live at the earliest.</p>
  </li>
</ul>

<p>As a result, we settled on providing the user the option to upload a PDF, DOC
or a DOCX file while filling up the rest of the application. To avoid making
changes to the database layer, this document is only temporarily stored on the
HasJob server until it is uploaded to Docspad.  Thereafter, a URL based on the
<code>docid</code> returned by Docspad Upload API is simply attached to the
<code>apply_message</code> field, which is the one that the employer receives in an email
allowing the employer to view the document with or without downloading it to
his device. The Docspad HTML5 based viewer can be embeded right into the
application, allowing us to let the user view the uploaded content from within
Hasjob’s website. </p>

<p>This process is quite simple to code, made simpler by the quite flexible 
<a href="http://flask.pocoo.org">Flask microframework</a> used for the Hasjob site along
with the easy Docspad API.</p>

<p>Some highlights of the project were :- </p>

<ol>
  <li>
    <p><strong>Wrapping around Docspad API</strong></p>

    <p>Since Docspad didn’t have any publicly available SDKs at the time, I began
by building a wrapper around the APIs. <a href="https://github.com/rajatkhanduja/hasjob/commit/45945f1cbad17dbc03839388a05cacb0bbf3d07b">This code</a>
later became the boilerplate for a <a href="https://github.com/Bookpad/docspad-sdk-python">Python SDK for Docspad</a>,
which will soon be stable. SDKs for several other languages and platforms
are in the pipeline too. SDKs not only make it easier to build applications
on, but also provide sample code for using the APIs for those who like to
build their own tools.</p>
  </li>
  <li>
    <p><strong>Lastuser and HasGeek Auth</strong></p>

    <p>HasGeek uses <a href="http://auth.hasgeek.com">HasGeek Auth</a> for authorization and
user management for its sites. It is powered by <a href="https://github.com/hasgeek/lastuser">Lastuser</a>,
which has been developed by HasGeek themselves! At that time, I was still 
getting to know more about HasGeek’s open sourced components and was quite
impressed with their dedication to sharing all these tools that they had
developed. </p>
  </li>
</ol>

<p>In the end, it turned out to be a great weekend project and let me get
acquainted with Flask and Docspad API. Now, every time I encounter a site that
doesn’t provide good support for uploading/viewing documents, I wonder all the
things they could do with the API! In fact, there are several other job portals
that could make use of the API in quite the same way. </p>

<p>While I didn’t follow up much after sending them the
<a href="https://github.com/hasgeek/hasjob/pull/81">pull request</a>, Niketh has been in
touch with them and informs me that they are quite pleased with the
implementation. Eagerly awaiting for the integration to go live! </p>

<p>Do leave your suggestions, about the blog or the project, in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Octopress?]]></title>
    <link href="http://rajatkhanduja.com/techblog/2014/03/11/all-set-and-ready-to-go/"/>
    <updated>2014-03-11T23:00:37+05:30</updated>
    <id>http://rajatkhanduja.com/techblog/2014/03/11/all-set-and-ready-to-go</id>
    <content type="html"><![CDATA[<p>Finally, the site is up and ready! Now, all that remains is for me to make all 
this effort worthwhile and start blogging regularly. </p>

<p>The experience of setting up this blog, however, taught me a lot of things. Not 
just the lessons required to setup <a href="http://octopress.org">Octopress</a> or this
particular theme (<a href="https://github.com/shashankmehta/greyshade/">Greyshade</a>) or 
the DNS, but …. oh, who am I kidding, that’s the set of things I gained out of 
this entire experience. But they are not really worth sharing, except probably
the incident where I ended up with an infinite loop of URL redirection because
of an error in configuring the DNS! </p>

<p>So, this post will be less about the hows, but whys! Why did I choose Octopress
(and Greyshade) and why do I expect this to be a good choice? That’s the question
I will focus on. </p>

<!--more-->

<ol>
  <li>
    <p><strong>Blogging right from my editor</strong></p>

    <p>While this might not make much sense to a lot of people, it means a lot to 
some of us to be able to do most of the things from within our favorite editor.
Being a <a href="http://vim.org">vim</a> fan myself, it gives me immense pleasure to be 
able to write this blog from the editor. The fools who’d argue that one could
just copy the content from one’s editor for blogging doesn’t know the importance
of formatting, hyperlinking, etc. in blogging. It becomes all the more important
when you aim to write blogs that would tend to include code snippets. Like
Latex, I could write most of the content first and worry about the
formatting later. That brings me to the next point …</p>
  </li>
  <li>
    <p><strong>Not having to worry about formatting</strong></p>

    <p>I quite perfectly fit the stereotype of developers who lack any sense about
the UI/UX. Many a times <a href="http://vickychijwani.github.io">Vicky</a> has laughed
off at the interface I found ‘usable’. In such a case, it only makes it harder
for me to imagine how the out put of my blog should look like. What Octopress
(or most such tools) offer, like Latex, is that most of the formatting 
decisions are taken care of without asking me. For instance, I needn’t worry
about the size of the heading or the color of the &lt;a&gt; tags. Should
it look green on hover or yellow? I needn’t worry about that. While at the same 
time, I get the ability to tinker parts that I do need fixed or changed. This
might be probably a good example of 
<a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice%3A_Why_More_Is_Less">Paradox of Choice</a>. 
 I don’t have to think about making responsive UI, or the alignment of text
 or the margin-width, which saves me from making a lot of decisions and I 
 feel less tense! </p>

    <p>Having tried some platforms prior to this, I know that most platforms don’t
offer smooth writing/formatting tools. My experience with 
<a href="http://blogger.com">Blogger</a> was quite troublesome when I kept running into
issues with the blockquote tag and had to resolve it by looking into the
HTML itself. <a href="http://wordpress.org">Wordpress</a> and <a href="http://medium.com">Medium</a>
seemed to provide great formatting tools for general blogging, but none
that had good support for technical blogs right out of the box. Sure, there 
are plugins and being a geek I could have found them, but it only convinces
me that they were not made for technical content.</p>

    <p>Moreover, being a vim fan, I enjoy tools that focus on commands/instructions
based on ‘typed commands’ rather than key combinations. vim’s support
for markdown only makes it easier for me to be sure of getting what I expect.</p>
  </li>
  <li>
    <p><strong>Writing in offline mode</strong></p>

    <p>While this might be more of a perk that I expect to use over time, this is 
barely something I have required as of now. Since the setup doesn’t require
a special server to interpret the content, I can preview and/or save a draft
whenever I want. Only to deploy do I need access to the Internet. However,
as I am connected most of the time, this might not be as useful.</p>
  </li>
</ol>

<p>Anyway, this is me just getting started with this platform and resuming blogging
after a long time. Maybe I’d have a lot of changes to these initial thoughts,
maybe not.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to Octopress]]></title>
    <link href="http://rajatkhanduja.com/techblog/2014/03/10/migrating-to-octopress/"/>
    <updated>2014-03-10T07:51:16+05:30</updated>
    <id>http://rajatkhanduja.com/techblog/2014/03/10/migrating-to-octopress</id>
    <content type="html"><![CDATA[<p>Now that I have a domain of my own and <a href="http://pages.github.com/">Github Pages</a>
are a good way to write and maintain a blog, I am trying to make a shift to
Octopress based blogging. While I maintain (if 8-13 months of inactivity counts
as maintaining) two blogs, <a href="http://blog.rajatkhanduja.com">Outlet</a> and 
<a href="http://techblog.rajatkhanduja.com">Technical Outlet</a>, I would be dropping the 
latter and shifting here. </p>

<p>At the time of writing this article, I do have certain projects that I would
like to write about. 
<!--more--></p>

<ol>
  <li>
    <p><strong>Integrating <a href="http://docspad.com">Docspad</a> with <a href="http://hasjob.co">HasJob</a></strong> </p>

    <p>More on this soon. Meanwhile, here’s the 
 <a href="https://github.com/hasgeek/hasjob/pull/81">pull request</a> for the same.</p>
  </li>
  <li>
    <p><strong><a href="https://github.com/Bookpad/docspad-sdk-python">Docspad Python SDK</a></strong> </p>

    <p>While working on the <a href="https://github.com/hasgeek/hasjob">HasJob code</a>, the
 need for such SDKs (more will follow) became clear. </p>
  </li>
  <li>
    <p><strong><a href="https://github.com/rajatkhanduja/WebComics">Android based Webcomics Reader</a></strong> </p>

    <p>As an avid Webcomics fan (my favorites being <a href="http://xkcd.com">XKCD</a> and
 <a href="http://smbc-comics.com">SMBC</a>, my first attempt at making an Android
 application revolves around the idea of making a single app for my favorite
 webcomics.  </p>
  </li>
  <li>
    <p><strong><a href="https://github.com/rajatkhanduja/ZeroKnowledgeDocuments/">Zero Knowledge Documents</a></strong></p>

    <p>While I have not made any improvements up on the basic tool in a long time,
 it has served my purpose well enough for now. </p>
  </li>
</ol>

<p>But more on these topics later for now I have to go through the painful process
of setting up a blog. No offence to any of the developers or contributors of 
Octopress, but any such setup is painful, only the magnitude varies. It has
certainly been easy so far to get up and running, but there are several things
I’d want on the site. Let’s see how that goes about. Maybe, this could be the
subject of yet another post. </p>

<p>Here’s hoping for a better blogging future. </p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
